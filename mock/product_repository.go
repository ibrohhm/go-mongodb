// Code generated by MockGen. DO NOT EDIT.
// Source: repository/product_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entity "github.com/go-mongo/entity"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockProductRepositorier is a mock of ProductRepositorier interface.
type MockProductRepositorier struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositorierMockRecorder
}

// MockProductRepositorierMockRecorder is the mock recorder for MockProductRepositorier.
type MockProductRepositorierMockRecorder struct {
	mock *MockProductRepositorier
}

// NewMockProductRepositorier creates a new mock instance.
func NewMockProductRepositorier(ctrl *gomock.Controller) *MockProductRepositorier {
	mock := &MockProductRepositorier{ctrl: ctrl}
	mock.recorder = &MockProductRepositorierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepositorier) EXPECT() *MockProductRepositorierMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProductRepositorier) Delete(_id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", _id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProductRepositorierMockRecorder) Delete(_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductRepositorier)(nil).Delete), _id)
}

// Get mocks base method.
func (m *MockProductRepositorier) Get(_id primitive.ObjectID) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", _id)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProductRepositorierMockRecorder) Get(_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductRepositorier)(nil).Get), _id)
}

// GetAll mocks base method.
func (m *MockProductRepositorier) GetAll() ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductRepositorierMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProductRepositorier)(nil).GetAll))
}

// Insert mocks base method.
func (m *MockProductRepositorier) Insert(product entity.Product) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", product)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockProductRepositorierMockRecorder) Insert(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProductRepositorier)(nil).Insert), product)
}

// Update mocks base method.
func (m *MockProductRepositorier) Update(_id primitive.ObjectID, product entity.Product) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", _id, product)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProductRepositorierMockRecorder) Update(_id, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductRepositorier)(nil).Update), _id, product)
}
